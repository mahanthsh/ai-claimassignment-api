# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from com_csaa_claims_ai_assignment.models.base_model_ import Model
from com_csaa_claims_ai_assignment import util


class Addresss(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, public_id=None, postal_code=None, state=None):  # noqa: E501
        """Addresss - a model defined in OpenAPI

        :param public_id: The public_id of this Addresss.  # noqa: E501
        :type public_id: str
        :param postal_code: The postal_code of this Addresss.  # noqa: E501
        :type postal_code: str
        :param state: The state of this Addresss.  # noqa: E501
        :type state: str
        """
        self.openapi_types = {
            'public_id': str,
            'postal_code': str,
            'state': str
        }

        self.attribute_map = {
            'public_id': 'publicID',
            'postal_code': 'postalCode',
            'state': 'state'
        }

        self._public_id = public_id
        self._postal_code = postal_code
        self._state = state

    @classmethod
    def from_dict(cls, dikt) -> 'Addresss':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Addresss of this Addresss.  # noqa: E501
        :rtype: Addresss
        """
        return util.deserialize_model(dikt, cls)

    @property
    def public_id(self):
        """Gets the public_id of this Addresss.

        public ID for  location address    # noqa: E501

        :return: The public_id of this Addresss.
        :rtype: str
        """
        return self._public_id

    @public_id.setter
    def public_id(self, public_id):
        """Sets the public_id of this Addresss.

        public ID for  location address    # noqa: E501

        :param public_id: The public_id of this Addresss.
        :type public_id: str
        """

        self._public_id = public_id

    @property
    def postal_code(self):
        """Gets the postal_code of this Addresss.

         Zip+4 and international codes  # noqa: E501

        :return: The postal_code of this Addresss.
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this Addresss.

         Zip+4 and international codes  # noqa: E501

        :param postal_code: The postal_code of this Addresss.
        :type postal_code: str
        """

        self._postal_code = postal_code

    @property
    def state(self):
        """Gets the state of this Addresss.

        State Code  # noqa: E501

        :return: The state of this Addresss.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Addresss.

        State Code  # noqa: E501

        :param state: The state of this Addresss.
        :type state: str
        """

        self._state = state

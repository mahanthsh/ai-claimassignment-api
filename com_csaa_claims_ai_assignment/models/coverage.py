# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from com_csaa_claims_ai_assignment.models.base_model_ import Model
from com_csaa_claims_ai_assignment import util


class Coverage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, deductible=None, rental_daily_limit=None, type=None, zero_glass_deduct=None):  # noqa: E501
        """Coverage - a model defined in OpenAPI

        :param deductible: The deductible of this Coverage.  # noqa: E501
        :type deductible: str
        :param rental_daily_limit: The rental_daily_limit of this Coverage.  # noqa: E501
        :type rental_daily_limit: str
        :param type: The type of this Coverage.  # noqa: E501
        :type type: str
        :param zero_glass_deduct: The zero_glass_deduct of this Coverage.  # noqa: E501
        :type zero_glass_deduct: str
        """
        self.openapi_types = {
            'deductible': str,
            'rental_daily_limit': str,
            'type': str,
            'zero_glass_deduct': str
        }

        self.attribute_map = {
            'deductible': 'deductible',
            'rental_daily_limit': 'rentalDailyLimit',
            'type': 'type',
            'zero_glass_deduct': 'zeroGlassDeduct'
        }

        self._deductible = deductible
        self._rental_daily_limit = rental_daily_limit
        self._type = type
        self._zero_glass_deduct = zero_glass_deduct

    @classmethod
    def from_dict(cls, dikt) -> 'Coverage':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Coverage of this Coverage.  # noqa: E501
        :rtype: Coverage
        """
        return util.deserialize_model(dikt, cls)

    @property
    def deductible(self):
        """Gets the deductible of this Coverage.


        :return: The deductible of this Coverage.
        :rtype: str
        """
        return self._deductible

    @deductible.setter
    def deductible(self, deductible):
        """Sets the deductible of this Coverage.


        :param deductible: The deductible of this Coverage.
        :type deductible: str
        """

        self._deductible = deductible

    @property
    def rental_daily_limit(self):
        """Gets the rental_daily_limit of this Coverage.


        :return: The rental_daily_limit of this Coverage.
        :rtype: str
        """
        return self._rental_daily_limit

    @rental_daily_limit.setter
    def rental_daily_limit(self, rental_daily_limit):
        """Sets the rental_daily_limit of this Coverage.


        :param rental_daily_limit: The rental_daily_limit of this Coverage.
        :type rental_daily_limit: str
        """

        self._rental_daily_limit = rental_daily_limit

    @property
    def type(self):
        """Gets the type of this Coverage.


        :return: The type of this Coverage.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Coverage.


        :param type: The type of this Coverage.
        :type type: str
        """

        self._type = type

    @property
    def zero_glass_deduct(self):
        """Gets the zero_glass_deduct of this Coverage.


        :return: The zero_glass_deduct of this Coverage.
        :rtype: str
        """
        return self._zero_glass_deduct

    @zero_glass_deduct.setter
    def zero_glass_deduct(self, zero_glass_deduct):
        """Sets the zero_glass_deduct of this Coverage.


        :param zero_glass_deduct: The zero_glass_deduct of this Coverage.
        :type zero_glass_deduct: str
        """

        self._zero_glass_deduct = zero_glass_deduct
